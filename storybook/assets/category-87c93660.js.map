{"version":3,"file":"category-87c93660.js","sources":["../../../src/presentation/components/icons/SvgIcon.tsx","../../../src/presentation/components/icons/ArrowDropDownIcon.tsx","../../../src/presentation/components/Pulldown/Pulldown.tsx","../../../node_modules/nanoid/index.browser.js","../../../src/const/category.ts"],"sourcesContent":["import React from 'react';\n\nexport type IconProps = {\n  className?: string;\n  titleAccess?: string;\n};\n\n/**\n * @see https://github.com/mui-org/material-ui/blob/next/packages/material-ui/@/SvgIcon/SvgIcon.js\n */\nexport function SvgIcon({\n  className,\n  titleAccess,\n  viewBox = '0 0 24 24',\n  children = null,\n}: IconProps & { viewBox?: string; children: React.ReactNode }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={className}\n      aria-hidden={titleAccess ? undefined : true}\n      aria-label={titleAccess || undefined}\n      role={titleAccess ? 'img' : undefined}\n      viewBox={viewBox}\n    >\n      {children}\n    </svg>\n  );\n}\n","import React from 'react';\n\nimport { SvgIcon, IconProps } from './SvgIcon';\n\n/**\n * @see https://fonts.google.com/icons\n */\nexport function ArrowDropDownIcon(props: IconProps) {\n  return (\n    <SvgIcon {...props} viewBox=\"0 -960 960 960\">\n      <path d=\"M480-328 225-583h510L480-328Z\" />\n    </SvgIcon>\n  );\n}\n","import React from 'react';\nimport { ArrowDropDownIcon } from '../icons/ArrowDropDownIcon';\n\ntype Props = {\n  className?: string;\n  id: string;\n  name: string;\n  items: {\n    id: string;\n    text: string;\n  }[];\n  selectedId?: string;\n  isInvalid?: boolean;\n  describedId?: string;\n  onChange?: React.ChangeEventHandler<HTMLSelectElement>;\n  onBlur?: React.ChangeEventHandler<HTMLSelectElement>;\n};\n\nexport const Pulldown = React.forwardRef<HTMLSelectElement, Props>(\n  function Pulldown(\n    {\n      className,\n      id,\n      name,\n      items,\n      selectedId,\n      isInvalid,\n      describedId,\n      onChange,\n      onBlur,\n    },\n    ref,\n  ) {\n    return (\n      <div className={`relative w-100 flex ${className || ''}`}>\n        <select\n          ref={ref}\n          id={id}\n          name={name}\n          className={`\n          border border-gray-300 border-solid rounded-sm\n          flex-grow flex-shrink\n          h-11 pl-1 pr-4\n          ${isInvalid ? 'border-red-600 bg-red-200' : ''}\n          appearance-none`}\n          value={selectedId}\n          aria-describedby={describedId}\n          onChange={onChange}\n          onBlur={onBlur}\n        >\n          {items.map(({ id, text }) => (\n            <option key={id} value={id}>\n              {text}\n            </option>\n          ))}\n        </select>\n        <ArrowDropDownIcon\n          className=\"\n          pointer-events-none\n          absolute top-4 right-0\n          h-4 w-4 fill-gray-800\"\n        />\n      </div>\n    );\n  },\n);\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nexport const CATEGORY_ITEMS = [\n  '技術調査',\n  '要件定義',\n  '基本設計',\n  '詳細設計',\n  '実装',\n  '単体テスト',\n  '結合テスト',\n  'システムテスト',\n  '運用',\n].map((text) => ({ id: nanoid(), text } as const));\n"],"names":["SvgIcon","className","titleAccess","viewBox","children","jsx","ArrowDropDownIcon","props","Pulldown","React","id","name","items","selectedId","isInvalid","describedId","onChange","onBlur","ref","jsxs","id2","text","nanoid","size","byte","CATEGORY_ITEMS"],"mappings":"sFAUO,SAAAA,EAAA,CAAiB,UAAAC,EACtB,YAAAC,EACA,QAAAC,EAAA,YACU,SAAAC,EAAA,IAEZ,EAAA,CACE,OAAAC,EAAA,IACE,MAAC,CAAA,MAAA,6BACO,UAAAJ,EACN,cAAAC,EAAA,OAAA,GACuC,aAAAA,GAAA,OACZ,KAAAA,EAAA,MAAA,OACC,QAAAC,EAC5B,SAAAC,CAEC,CAAA,CAGP,8YCrBO,SAAAE,EAAAC,EAAA,CACL,OAAAF,EAAA,IAAAL,EAAA,CAAA,GAAAO,EAAA,QAAA,iBAAA,SAAAF,EAAA,IAAA,OAAA,CAAA,EAAA,+BAAA,CAAA,CAAA,CAAA,CAKF,wTCKO,MAAAG,EAAAC,EAAA,WAAuB,SAAA,CAE1B,UAAAR,EACE,GAAAS,EACA,KAAAC,EACA,MAAAC,EACA,WAAAC,EACA,UAAAC,EACA,YAAAC,EACA,SAAAC,EACA,OAAAC,CACA,EAAAC,EAAA,CAIF,OAAAC,EAAA,KAAA,MAAA,CAAA,UAAA,uBAAAlB,GAAA,KAAA,SAAA,CAEII,EAAA,IAAA,SAAC,CAAA,IAAAa,EACC,GAAAR,EACA,KAAAC,EACA,UAAA;AAAA;AAAA;AAAA;AAAA,YACWG,EAAA,4BAAA;AAAA,2BAIiC,MAAAD,EAErC,mBAAAE,EACW,SAAAC,EAClB,OAAAC,EACA,SAAAL,EAAA,IAAA,CAAA,CAAA,GAAAQ,EAAA,KAAAC,CAAA,IAAAhB,EAAA,IAAA,SAAA,CAAA,MAAAe,EAAA,SAAAC,CAAA,EAAAD,CAAA,CAAA,CAMC,CAAA,EACHf,EAAA,IACAC,EAAC,CAAA,UAAA;AAAA;AAAA;AAAA,gCACW,CAAA,CAIZ,CAAA,CAAA,CACF,CAGN,k/BC9CO,IAAIgB,EAAS,CAACC,EAAO,KAC1B,OAAO,gBAAgB,IAAI,WAAWA,CAAI,CAAC,EAAE,OAAO,CAACb,EAAIc,KACvDA,GAAQ,GACJA,EAAO,GACTd,GAAMc,EAAK,SAAS,EAAE,EACbA,EAAO,GAChBd,IAAOc,EAAO,IAAI,SAAS,EAAE,EAAE,YAAa,EACnCA,EAAO,GAChBd,GAAM,IAENA,GAAM,IAEDA,GACN,EAAE,EC9BA,MAAMe,EAAiB,CAC5B,OACA,OACA,OACA,OACA,KACA,QACA,QACA,UACA,IACF,EAAE,IAAKJ,IAAU,CAAE,GAAIC,EAAO,EAAG,KAAAD,GAAgB","x_google_ignoreList":[3]}